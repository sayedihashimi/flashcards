@* 
This file is part of SayedHa.Flashcards.

SayedHa.Flashcards is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SayedHa.Flashcards is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with SayedHa.Flashcards.  If not, see <https://www.gnu.org/licenses/>.
*@
@page "/"
@using SayedHa.Flashcards.Shared
@inject HttpClient Http
@inject FlashcardWeb FlashcardWeb
@inject IJSRuntime JsRuntime

@if(currentFlashcard != null){
    <span id="mainMenu">
        <ul>
            <li @onclick="ShowDefaultCards">🏠</li>            
            <li @onclick="ShowLetters"><img src="media/letters.svg" alt="letters" /></li>
            <li @onclick="ShowNumbers"><img src="media/numbers.svg" alt="numbers" /></li>
            <li @onclick="ShowShapes"><img src="media/shapes-icon.svg" alt="shapes" /></li>
            <li @onclick="ShowAddition">➕</li>
            <li><NavLink class="nav-link" href="numbers" Match="NavLinkMatch.All">
                    <img src="media/numbersgame.svg" alt="numbers game" />
                </NavLink>
            </li>
            <li><NavLink class="nav-link" href="counting" Match="NavLinkMatch.All">
                    <img src="media/questionMark.svg" alt="counting game" />
                </NavLink>
            </li>
        </ul>
    </span>
    <span class="previousCardButton">
        <img src="left-arrow.svg" class="navButton" alt="left arrow" @onclick="MovePrevious" />
    </span>
    <FlashcardView Flashcard="@currentFlashcard" />
    <span class="nextCardButton">
        <img src="left-arrow.svg" class="navButton" alt="left arrow" @onclick="MoveNext" />
    </span>
@*    <div>
        <a @onclick="ShowAddition">addition</a>
    </div>*@
}
else{
    <p class="loading"></p>
}

@if(FlashcardWeb == null){
    <h1>flashcardweb null</h1>
}

@code{
    Flashcard currentFlashcard = null;

    protected async Task<List<SayedHa.Flashcards.Shared.Flashcard>> GetFlashcards() => await FlashcardWeb.GetFlashcardsAsync("samay");

    protected IFlashcardList _flashcardList;
    private IFlashcardList FlashcardList
    {
        get
        {
            return _flashcardList;
        }
        set
        {
            _flashcardList = value;
            if (_flashcardList != null)
            {
                currentFlashcard = _flashcardList.GetCurrent();
            }
        }
    }
    protected override async Task OnInitializedAsync() {

#if DEBUGdddddd
    await Task.Delay(10000);
#endif

        if(FlashcardWeb != null) {
             FlashcardList = new FlashcardList(await GetFlashcards());
            //_flashcardList = new AdditionFlashcardList(1, 9, 10);
            //currentFlashcard = _flashcardList.GetCurrent();
        }
    }
    private void MoveNext()
    {
        FlashcardList.MoveNext();
        currentFlashcard = _flashcardList.GetCurrent();
    }
    private void MovePrevious()
    {
        FlashcardList.MovePrevious();
        currentFlashcard = _flashcardList.GetCurrent();
    }
    
    private void ShowAddition() {
        FlashcardList = new AdditionFlashcardList(1, 9, 25);
        //currentFlashcard = _flashcardList.GetCurrent();
    }
    private async Task ShowShapes()
    {
        FlashcardList = new FlashcardList(await FlashcardWeb.GetFlashcardsAsync("shapes"));
        //currentFlashcard = _flashcardList.GetCurrent();
    }
    private async Task ShowLetters()
    {
        FlashcardList = new FlashcardList(await FlashcardWeb.GetFlashcardsAsync("letters"));
    }
    private async Task ShowNumbers()
    {
        FlashcardList = new FlashcardList(await FlashcardWeb.GetFlashcardsAsync("numbers"));
    }
    private async Task ShowDefaultCards() {
        // probably should cache these cardLists, exception being pages
        // like the Addition page
        // should implement some general way to caches these files
        FlashcardList = new FlashcardList(await GetFlashcards());
        //currentFlashcard = _flashcardList.GetCurrent();
    }
}