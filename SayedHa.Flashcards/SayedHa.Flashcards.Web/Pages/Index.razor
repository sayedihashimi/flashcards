@* 
This file is part of SayedHa.Flashcards.

SayedHa.Flashcards is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SayedHa.Flashcards is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with SayedHa.Flashcards.  If not, see <https://www.gnu.org/licenses/>.
*@
@page "/"
@using SayedHa.Flashcards.Shared
@inject HttpClient Http
@inject FlashcardWeb FlashcardWeb

@if(currentFlashcard != null){
    <span class="previousCardButton">
        <img src="left-arrow.svg" class="navButton" alt="left arrow" @onclick="MovePrevious" />
    </span>
    <FlashcardView Flashcard="@currentFlashcard" />
    <span class="nextCardButton">
        <img src="left-arrow.svg" class="navButton" alt="left arrow" @onclick="MoveNext" />
    </span>
}
else{
    <p class="loading"></p>
}

@if(FlashcardWeb == null){
    <h1>flashcardweb null</h1>
}

@code{
    List<Flashcard> Flashcards = null;
    int currentIndex = 0;
    Flashcard currentFlashcard = null;

    protected async Task<List<SayedHa.Flashcards.Shared.Flashcard>> GetFlashcards() => await FlashcardWeb.GetFlashcardsAsync("samay");

    protected override async Task OnInitializedAsync() {
#if DEBUG
    await Task.Delay(10000);
#endif

        if(FlashcardWeb != null) {
            Flashcards = await GetFlashcards();
            if (Flashcards != null && Flashcards.Count > 0) {
                currentFlashcard = Flashcards[currentIndex];
            }
            else {
                Console.WriteLine("Flashcards null");
            }    
        }
    }

    private void MoveNext()
    {
        if (Flashcards.Count > 0)
        {
            currentIndex = (currentIndex + 1) % Flashcards.Count;
            currentFlashcard = Flashcards[currentIndex];
        }
        else{
            Console.WriteLine("Flashcards is null or empty");
        }
    }
    private void MovePrevious()
    {
        if (Flashcards.Count > 0)
        {
            currentIndex = (currentIndex - 1) % Flashcards.Count;
            if(currentIndex < 0){
                currentIndex = Flashcards.Count - 1;
            }
            currentFlashcard = Flashcards[currentIndex];
        }
        else{
            Console.WriteLine("Flashcards is null or empty");
        }
    }
}