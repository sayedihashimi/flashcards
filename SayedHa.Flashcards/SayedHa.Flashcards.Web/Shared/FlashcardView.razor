@inject IJSRuntime JsRuntime

<section class="flashcard">
@if (Flashcard != null)
{
	@if (!string.IsNullOrEmpty(Flashcard.ImageUrl))
	{
		<img src="@Flashcard.ImageUrl" alt="@Flashcard.Answer" class="flashcard-image" 
			@onclick="ShowAnswer" hasAnswer=@(!string.IsNullOrEmpty(Flashcard.Answer)) />		
	}
	@if(!string.IsNullOrEmpty(Flashcard.QuestionText)){
		<div class="flashcard-questiontext" @onclick="ShowAnswer" 
				hasAnswer=@(!string.IsNullOrEmpty(Flashcard.Answer))>@Flashcard.QuestionText</div>
	}
	<h2 class="flashcard-answer" hidden="@(!(Flashcard.ShowText || ShowText))">@Flashcard.Answer</h2>
	<span class="flashcard-speaker" hidden="@(!HasAudio())" @onclick="PlayCardAudio">
		<audio id="audio-@Flashcard.TempId" src="@Flashcard.Audio" />🗣
	</span>
}
else
{
	<span>error</span>
}
</section>


@code {
	private SayedHa.Flashcards.Shared.Flashcard _flashcard;
	[Parameter]
	public SayedHa.Flashcards.Shared.Flashcard Flashcard {
		get
		{
			return _flashcard;
		}
		set
		{
			_flashcard = value;
			ShowText = false;
		}
	}

	public bool ShowText { get; set; }
	private bool HasAudio()
	{
		return Flashcard != null && !string.IsNullOrEmpty(Flashcard.Audio);
	}

	// Events that are called by this page
	private void ShowAnswer(){
		ShowText = true;
	}
	private void PlayCardAudio()
	{
		Console.WriteLine("Inside FlashcardView.PlayAudio");
		// audio-@Flashcard.TempId
		JsRuntime.InvokeAsync<string>("PlayAudio2", $"audio-{Flashcard.TempId}");
	}
}
