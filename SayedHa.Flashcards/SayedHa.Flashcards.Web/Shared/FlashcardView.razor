@* 
This file is part of SayedHa.Flashcards.

SayedHa.Flashcards is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SayedHa.Flashcards is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with SayedHa.Flashcards.  If not, see <https://www.gnu.org/licenses/>.
*@
@inject IJSRuntime JsRuntime

<section class="flashcard">
@if (Flashcard != null)
{
	@if (!string.IsNullOrEmpty(Flashcard.ImageUrl))
	{
		<img src="@Flashcard.ImageUrl" alt="@Flashcard.Answer" class="flashcard-image" 
			@onclick="ShowAnswer" hasAnswer=@(!string.IsNullOrEmpty(Flashcard.Answer)) />		
	}
	@if(!string.IsNullOrEmpty(Flashcard.QuestionText)){
		<div class="flashcard-questiontext" @onclick="ShowAnswer" 
				hasAnswer=@(!string.IsNullOrEmpty(Flashcard.Answer))>@Flashcard.QuestionText</div>
	}
	<h2 class="flashcard-answer" hidden="@(!(Flashcard.ShowText || ShowText))">@Flashcard.Answer</h2>
	@if (HasAudio()) {
		<div class="flashcard-speaker" @onclick="PlayCardAudio">
				<audio id="audio-@Flashcard.TempId" src="@Flashcard.Audio" preload="auto" />
			<img src="media/speaker.svg" alt="speaker" />
		</div>
	} 
	else if(HasQuestionTextAudioParts()) {
		<div id="questionTextAudio" class="flashcard-speaker" @onclick="PlayQuestionTextAudio">
			<img src="media/speaker.svg" alt="speaker" />
		</div>
	}

}
else
{
	<span>error</span>
}
</section>


@code {
	private SayedHa.Flashcards.Shared.Flashcard _flashcard;
	[Parameter]
	public SayedHa.Flashcards.Shared.Flashcard Flashcard {
		get
		{
			return _flashcard;
		}
		set
		{
			_flashcard = value;
			ShowText = false;
		}
	}

	public bool ShowText { get; set; }

	private bool HasAudio() => Flashcard != null && !string.IsNullOrEmpty(Flashcard.Audio);
	
	private bool HasQuestionTextAudioParts() => Flashcard.QuestionAudioParts != null && Flashcard.QuestionAudioParts.Count > 0;
	
	// Events that are called by this page
	private void ShowAnswer(){
		ShowText = true;
	}
	private void PlayCardAudio()
	{
		Console.WriteLine("Inside FlashcardView.PlayAudio");
		// audio-@Flashcard.TempId
		JsRuntime.InvokeAsync<string>("PlayAudio", $"audio-{Flashcard.TempId}");
	}
	private void PlayQuestionTextAudio() {
		Console.WriteLine("inside FlashcardView.PlayQuestionTextAudio");
		string[] urls = Flashcard.QuestionAudioParts.ToArray();
		Console.WriteLine($"urls: {string.Join(";",urls)}");
		JsRuntime.InvokeVoidAsync("PlayAudioSeries", Flashcard.QuestionAudioParts);
	}
}
