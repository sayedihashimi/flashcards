@*
This file is part of SayedHa.Flashcards.

SayedHa.Flashcards is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SayedHa.Flashcards is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with SayedHa.Flashcards.  If not, see <https://www.gnu.org/licenses/>.
*@
@inject IJSRuntime JsRuntime

@if (gameData?.LettersToDisplay?.Count > 0 && gameData?.LettersToAnnounce?.Count > 0) {
    <section id="findLetterGame">
        <header id="gameDataHeader">
            Find the letter that you hear. Click speaker to replay the letter <span @onclick="PlayLetterToAnnounce">🔊</span>
        </header>
        <section id="gameDataContent">
            @foreach (var item in gameData.LettersToDisplay) {
                <span class="letterBox" @onclick="() => NewClick(item)">
                    <span class="letter" hasBeenSelected="@item.HasBeenSelected" @onclick="() => NewClick(item)">@item.Letter</span>
                </span>
            }
            <audio id="letterToAnnounce">
                <source src="@gameData.LetterToAnnounce.AudioFilePath">
            </audio>
        </section>
    </section>
}
else {
    <fast-progress-ring>loading...</fast-progress-ring>
}

@code {
    private FindLetterGameData? gameData;

    protected override void OnInitialized() {
        Reset();
    }

    protected override void OnAfterRender(bool firstRender) {
        base.OnAfterRender(firstRender);
        if (firstRender) {
            PlayLetterToAnnounce();
        }
    }

    public void PlayLetterToAnnounce() {
        Console.WriteLine($"PlayLetterToAnnounce, letter: {gameData?.LetterToAnnounce}");
        if(gameData?.LetterToAnnounce == null) {
            Console.WriteLine("PlayLetterToAnnounce: gameData.LetterToAnnounce is null");
            return;
        }
        JsRuntime.InvokeAsync<string>("PlayAudioFromFile", gameData.LetterToAnnounce.AudioFilePath);
    }
    protected FindLetterGameDataItem GetLetterToDisplay(string letter) {
        if(gameData?.LettersToDisplay?.Count > 0) {
            foreach (var item in gameData!.LettersToDisplay) {
                if (item.Letter == letter) {
                    return item;
                }
            }
        }

        return null;
    }
    public void Reset() {
        var randomizeLettersToDisplay = false;
        var randomizeLettersToAnnounce = true;
        gameData = new FindLetterGameData(randomizeLettersToDisplay, randomizeLettersToAnnounce);
    }

    protected void NewClick(FindLetterGameDataItem letterClicked) {
        Console.WriteLine("nc");

        var lta = gameData!.LetterToAnnounce?.Letter;
        Console.WriteLine($"letter clicked: {letterClicked.Letter}. Lta: {lta}");

        if (string.Equals(gameData!.LetterToAnnounce?.Letter, letterClicked.Letter)) {
            Console.Write(" *** Match found ***\n");
            letterClicked.HasBeenSelected = true;
            var lc = GetLetterToDisplay(letterClicked.Letter);
            if(lc != null) {
                Console.WriteLine("found letter to display");
                lc.HasBeenSelected = true;
                if (gameData.HasWon()) {
                    Console.WriteLine("User has won");
                }
                gameData.MoveNextLetterToAnnounce();
                StateHasChanged();
                PlayLetterToAnnounce();
                
            }
            StateHasChanged();
        }
    }
    // events below
    protected void Clicked(FindLetterGameDataItem letterClicked) {
        Console.Write($"letter clicked: {letterClicked.Letter}");/*
        var lta = gameData!.LetterToAnnounce?.Letter;
        Console.Write($" Letter to announce: {lta}");

        if (string.Equals(gameData!.LetterToAnnounce?.Letter, letterClicked.Letter)) {
            Console.Write(" *** Match found ***");
            letterClicked.HasBeenSelected = true;
            StateHasChanged();
        }*/
    }
}
