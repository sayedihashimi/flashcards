@* 
This file is part of SayedHa.Flashcards.

SayedHa.Flashcards is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SayedHa.Flashcards is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with SayedHa.Flashcards.  If not, see <https://www.gnu.org/licenses/>.
*@
@inject IJSRuntime JsRuntime
@using System.Diagnostics
<section class="ntg-container" ntgfinished="@IsFinished">
<audio id="audio-beep" preload="auto">
        <source src="media/tone-beep.mp3">
</audio>
<audio id="crow-cheering" preload="auto">
        <source src="media/crowd-cheering.mp3">
</audio>
@if(Ntg != null && Ntg.Items != null && Ntg.Items.Count > 0) {
    if (!IsFinished) {
        <header class="numberGameHeader">
            <h1>Click from 1 - @Ntg.NumberOfItems in order</h1>
        </header>
        <section class="ntg" ntgfinished="@IsFinished">
        @for(int i = 0; i < Ntg.NumberOfItems; i++) {
            var currentItem = Ntg.Items[i];
        
            <span class="ntg-item" beenselected="@currentItem.HasBeenSelected" @onclick="() => Clicked(currentItem)">@currentItem.Value</span>
        }
        </section>
    }
    else {
        <div class="pyro">
          <div class="before"></div>
          <div class="after"></div>
        </div>
    }
    
}
else {
        <fast-progress-ring>loading...</fast-progress-ring>
}
</section>
@code {
    [Parameter]
    public int NumItems { get; set; } = 25;
    [Parameter]
    public Stopwatch? Stopwatch{ get; set; }
    private NumberTableGame? Ntg;
    private int NextNumberToSelect = 1;

    protected override void OnInitialized() {
        Reset();
    }

    bool hasWon = false;
    protected void Clicked(NumberTableGameItem item) {
        Console.WriteLine($"clicked {item.Value}");

        if(item.Value == NextNumberToSelect) {
            JsRuntime.InvokeAsync<string>("PlayAudio", $"audio-beep");
            item.HasBeenSelected = true;
            NextNumberToSelect++;

            if(Stopwatch != null) {
                Stopwatch.Start();
            }
        }
        bool allSelected = true;
        // if all items have been selected, stop the Stopwatch
        foreach(var i in Ntg.Items) {
            if (!i.HasBeenSelected) {
                allSelected = false;
                break;
            }
        }
        if (allSelected) {
            if (!hasWon) {
                JsRuntime.InvokeAsync<string>("PlayAudio", $"crow-cheering");
            }
            hasWon = true;
            Stopwatch.Stop();
        }
    }

    protected bool IsFinished {
        get {
            if(Ntg!= null && Ntg.Items != null && Ntg.Items.Count > 0) {
                foreach(var i in Ntg.Items) {
                    if (!i.HasBeenSelected) {
                        return false;
                    }
                }
                return true;
            }

            return false;
        }
    }
    public void Reset() {
        if(NumItems <= 0) {
            NumItems = 25;
        }
        hasWon = false;
        NextNumberToSelect = 1;
        Console.WriteLine("initalizing NumberTableGame");
        Ntg = new NumberTableGame(NumItems);
        Stopwatch.Reset();
    }
}
