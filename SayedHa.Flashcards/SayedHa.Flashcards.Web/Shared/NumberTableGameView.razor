@using System.Diagnostics
@if(Ntg != null && Ntg.Items != null && Ntg.Items.Count > 0) {
    <section class="ntg">
    @for(int i = 0; i < Ntg.NumberOfItems; i++) {
        var currentItem = Ntg.Items[i];
        
        <span class="ntg-item" beenselected="@currentItem.HasBeenSelected" @onclick="() => Clicked(currentItem)">@currentItem.Value</span>
    }
    </section>
}
else {
    <p class="loading" />
}

@code {
    [Parameter]
    public int NumItems { get; set; } = 25;
    [Parameter]
    public Stopwatch Stopwatch{ get; set; }
    private NumberTableGame Ntg;
    private int NextNumberToSelect = 1;

    protected override void OnInitialized() {
        if(NumItems <= 0) {
            NumItems = 25;
        }
        Console.WriteLine("initalizing NumberTableGame");
        Ntg = new NumberTableGame(NumItems);
    }

    protected void Clicked(NumberTableGameItem item) {
        Console.WriteLine($"clicked {item.Value}");

        if(item.Value == NextNumberToSelect) {
            item.HasBeenSelected = true;
            NextNumberToSelect++;

            if(Stopwatch != null) {
                Stopwatch.Start();
            }
        }
        bool allSelected = true;
        // if all items have been selected, stop the Stopwatch
        foreach(var i in Ntg.Items) {
            if (!i.HasBeenSelected) {
                allSelected = false;
                break;
            }
        }
        if (allSelected) {
            Stopwatch.Stop();
        }
    }
}
